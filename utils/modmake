#! /usr/bin/python
# Build a module.

import sys, os

options = {}
knownOptions = ["host", "sysroot", "modname"]

for param in sys.argv[1:]:
	if param.startswith("--") and ('=' in param):
		key, value = param[2:].split('=', 1)
		if key not in knownOptions:
			sys.stderr.write("%s: unknown command-line option: --%s\n" % (sys.argv[0], key))
			sys.exit(1)
		options[key] = value
	else:
		sys.stderr.write("%s: unknown command-line option: %s\n" % (sys.argv[0], key))
		sys.exit(1)

modcc = "modcc"
modld = "modld"
cc = "gcc"
rulefile = "/lib/module.rule"
kernelInclude = "/kernel-include"
modname = options.get("modname", "out")

if options.has_key("host"):
	modcc = options["host"] + "-modcc"
	modld = options["host"] + "-modld"
	cc = options["host"] + "-gcc"

if options.has_key("sysroot"):
	rulefile = options["sysroot"] + "/lib/module.rule"
	kernelInclude = options["sysroot"] + "/kernel-include"

if os.system("mkdir -p build") != 0:
	sys.stderr.write("%s: cannot create build directory\n" % sys.argv[0])
	sys.exit(1)

if os.system("mkdir -p out") != 0:
	sys.stderr.write("%s: cannot create out directory\n" % sys.argv[0])
	sys.exit(1)

f = open(rulefile, "rb")
modrule = f.read()
f.close()

objectFiles = []
depFiles = []
rules = []
for name in os.listdir("."):
	if name.endswith(".c"):
		objfile = name[:-1]+"o"
		depfile = "build/" + name[:-1]+"d"
		rule = modrule.replace("%REPLACE%", objfile)
		objfile = "build/" + objfile
		rule = rule.replace("%OBJFILE%", objfile)
		rule = rule.replace("%DEPFILE%", depfile)
		rule = rule.replace("%CFILE%", name)
		rules.append(rule)
		objectFiles.append(objfile)
		depFiles.append(depfile)

f = open("build/mod.mk", "wb")
f.write("CFLAGS=-I %s\n" % kernelInclude)
f.write("TARGET_CC=%s\n" % cc)
f.write("TARGET_MODCC=%s\n" % modcc)
f.write("out/%s.gkm: %s\n" % (modname, " ".join(objectFiles)))
f.write("\t%s $@ $^\n" % modld)
f.write("-include %s\n" % " ".join(depFiles))
f.write("\n".join(rules))
f.close()

sys.exit(os.system("make -f build/mod.mk"))
