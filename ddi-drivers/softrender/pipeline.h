/*
	Madd Software Renderer

	Copyright (c) 2014-2017, Madd Games.
	All rights reserved.
	
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:
	
	* Redistributions of source code must retain the above copyright notice, this
	  list of conditions and the following disclaimer.
	
	* Redistributions in binary form must reproduce the above copyright notice,
	  this list of conditions and the following disclaimer in the documentation
	  and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
	FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
	OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef PIPELINE_H_
#define PIPELINE_H_

#include <GL/ddigl.h>

/**
 * Vector types.
 */
typedef float SRVector __attribute__ ((vector_size(16)));
typedef int SRVec2D __attribute__ ((vector_size(8)));

/**
 * Vertex shader. The shader compiler generates directly executable code implementing a function
 * of this prototype. Arguments are as follows:
 *
 *	uniforms
 *		Points to a structure representing the current uniform variables. The format is
 *		specific to each individual program, and may be NULL if no uniforms are used.
 *
 *	inputs
 *		Points to the input structure for this specific vertex. The format is again specific
 *		to the pipeline.
 *
 *	outputs
 *		Points to the structure to be used for outputs from the vertex shader. It is also
 *		pipeline-dependent, and the same pointer is later passed directly to the fragment
 *		shader.
 *
 * The function must return the vertex coordinates in screen space (gl_Position).
 */
typedef SRVector (*SRVertexShader)(const void *uniforms, const void *inputs, void *outputs);

/**
 * Fragment shader. The shader compiler generates directly executable code implementing a function
 * of this prototype. Arguments are as follows:
 *
 *	uniforms
 *		Points to a structure representing the current uniform variables. The format is
 *		specific to each individual program, and may be NULL if no uniforms are used.
 *
 *	inputs1/2/3
 *		Input structure. This is taken directly from the output of a vertex shader.
 *
 *	outputs
 *		An array of SRVector's representing output. This is a fixed array of 8 SRVector's, one
 *		for each color buffer, and the function must fill them with the value to write
 *		into each buffer. Just like you would expect from the outputs of a GL fragment
 *		shader.
 *
 *	bary
 *		Barycentric coordinates of the fragment, used to interpolate attributes.
 */
typedef void (*SRFragmentShader)(const void *uniforms, const void *inputs1, const void *inputs2, const void *inputs3, SRVector *outputs, SRVector bary);

/**
 * Pipeline variable attribute definition, used to define uniforms and inputs.
 */
typedef struct
{
	/**
	 * Data type; GL_INT, GL_FLOAT, GL_DOUBLE. 0 means not defined.
	 */
	GLenum type;
	
	/**
	 * Number of components (1, 2, 3, 4).
	 */
	GLint size;
	
	/**
	 * Offset into the corresponding structure.
	 */
	size_t offset;
} SRVarDef;

/**
 * Represents a pipeline object. Defines DDIGL_Pipeline for softrender.
 */
struct __ddigl_pipeline
{
	/**
	 * Points to the memory mapping containing the shader code, and its size. If NULL and 0, 
	 * then the code is static. This is only the case for 'defaultPipeline'.
	 */
	void *ptr;
	size_t size;
	
	/**
	 * Size of the uniform structure.
	 */
	size_t szUniforms;
	
	/**
	 * Size of the vertex shader input structure.
	 */
	size_t szVertex;
	
	/**
	 * Size of the buffer passed between vertex and fragment shader.
	 */
	size_t szVertexFragment;
	 
	/**
	 * All stages of the pipeline. See definitions above. For 'defaultPipeline', these are static
	 * functions defined in pipeline.c (furthermore, if a stage is missing from a GL program object,
	 * it is likewise substituted with a static function). In other cases, this is code in the mapped
	 * area, generated by the shader compiler.
	 */
	SRVertexShader vertexShader;
	SRFragmentShader fragmentShader;
	
	/**
	 * Definitions of uniform variables.
	 */
	SRVarDef uniforms[64];
	
	/**
	 * Definitions of vertex attributes.
	 */
	SRVarDef attribs[64]; 
};

/**
 * Default pipeline.
 */
extern DDIGL_Pipeline srDefaultPipeline;

#endif
