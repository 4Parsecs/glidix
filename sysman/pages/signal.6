>NAME

signal - signals

>SYNOPSIS

	#include <signal.h>

>DESCRIPTION

Signals are a mechanism by which a process or thread may be interrupted to handle a special condition. There are 2 types of signals: synchronous and asynchronous. Asynchronous signals can be sent by a process to another process, or to itself, or to a specific thread within itself, by calling [kill.2] or [pthread_kill.2] - they are typically used to ask the process to terminate, to stop doing a certain job, or to be killed immediately. Synchronous signals are delivered to a thread when an error occurs that cannot be handled by allowing code to continue - for example, an attempt to access memory in a way that violates access settings on that memory, or an address outside of any mappings.

A process has a list of 'signal dispositions' - one for each type of signal - specifying what action to take when that signal is delivered. The action can be to terminate immediately (in which case, if the parent process calls [wait.2], the wait status will indicate that the child was terminated by a signal), to ignore the signal, or to call a special function known as the 'signal handler', which may respond to the signal on some other way. Dispositions can be changed by calling [signal.2] or [sigaction.2]. Refer to their manual pages for information about safety. Each signal also has a default disposition.

Glidix defines all signals required by POSIX, but not all of them are used. The signals that can be sent by [kill.2] are limited for sanity reasons, and the kernel may also send some additional signals when errors occur. All in all, the following signals are actually used by Glidix. In the descriptions, 'sync' means synchronous and 'async' means asynchronous.

\* *SIGHUP* ('async') - the controlling terminal of the process has been disconnected.

\* *SIGINT* ('async') - the user has requested the process to be interrupted. This can be sent using [kill.2] by another process, or by the user using [kill.1]. Also, when the user presses Ctrl-C at the controlling terminal, this signal is sent to all processes in the foreground process group. See [creds.6].

\* *SIGILL* ('sync') - attempted to execute an illegal instruction. Under Glidix, this signal is sent in reaction to undefined opcodes, or when the General Protection Fault is thrown by the CPU.

\* *SIGABRT* ('sync') - delivered when [abort.2] is called. A process may also be terminated immediately, with the wait status reported as a termination by *SIGABRT*, if delivering a signal is impossible due to a broken or overflowing stack.

\* *SIGFPE* ('sync') - an arithmetic error, such as a division by zero, has occured.

\* *SIGKILL* ('async') - this signal can be sent using [kill.2] or by the user using [kill.1], and forces an immediate termination. The disposition setting is ignored.

\* *SIGBUS* ('sync') - delivered when the system is unable to load a file mapping into physical memory, or some other fatal error related to paging.

\* *SIGSEGV* ('sync') - delivered when the thread attempts to access an unmapped memory region, or attempts to perform a disallowed operations, such as writing to read-only memory.

\* *SIGSYS* ('sync') - delivered when the thread attempts to make an undefined system call (an invalid value was placed in '%rax' during a 'syscall' instruction).

\* *SIGPIPE* ('sync') - delivered when the thread tries to read/write a broken pipe.

\* *SIGALRM* ('async') - delivered after the time set by [alarm.2] has passed.

\* *SIGTERM* ('async') - can be sent using [kill.2] or by the user using [kill.1]. Requests the process to terminate, while allowing it to perform any necessary tasks beforehand.

\* *SIGUSR1*, *SIGUSR2* ('async') - user-defined signals, can be sent using [kill.2] or [kill.1] and have no predefined meaning.

\* *SIGCHLD* ('async') - delivered to the parent when a child process has terminated.

\* *SIGSTOP* ('async') - can be sent using [kill.2] or [kill.1], and unconditionally forces the process to stop until *SIGCONT* is delivered. The disposition setting is ignored.

\* *SIGTSTP* ('async') - a request to stop, sent using [kill.2] or [kill.1].

\* *SIGCONT* ('async') - can be sent using [kill.2] or [kill.1], and causes the process to be woken up from a *SIGSTOP*. The signal handler, if any, is called after the waking up.

\* *SIGTTIN* ('sync') - delivered during an attempt to [read.2] from a terminal while being in a background process group.

\* *SIGTTOU* ('sync') - delivered during an attempt to [write.2] to a terminal while being in a background process group.

The signals *SIGSTOP* and *SIGKILL* cannot be caught or ignored; they will always cause the process to stop or terminate immediately, respectively.

The default action for the signals *SIGKILL*, *SIGHUP*, *SIGINT*, *SIGQUIT*, *SIGILL*, *SIGABRT*, *SIGFPE*, *SIGSEGV*, *SIGPIPE*, *SIGALRM*, *SIGTERM*, *SIGUSR1*, *SIGUSR2*, *SIGBUS* and *SIGSYS* is to terminate the process. The default action for all other signals is to ignore.

Every thread has a 'signal mask', which controls which signals can be delivered. If the bit corresponding to a signal is set on the signal mask, and the signal is to be delivered, it instead becomes 'pending' and will be delivered as soon as it is unblocked. You cannot block synchronous signals, as well as *SIGKILL* and *SIGSTOP*; attempts to do so are silently ignored. The signal mask can be updated using [sigprocmask.2] or [pthread_sigmask.2]; under Glidix they are exactly equivalent, but on some other POSIX-based systems, [sigprocmask.2] may not be thread-safe. Use of [sigprocmask.2] is generally discouraged in a multithreaded environment.
