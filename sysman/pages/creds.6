>NAME

creds - process and thread credentials

>DESCRIPTION

A process is a group of threads, which share the same address spce, file table, signal dispositions, and other information, knows as 'process credentials'. Each thread has its own set of registers (including instruction pointer and stack), executable permissions and other information known as 'thread credentials'. This page describes those credentials.

>>Process Credentials

\* The process ID (PID) is a positive nonzero integer which uniquely identifies each process on the system. The PID is assigned when the processis created using [fork.2], and a process may find out its PID by calling [getpid.2]. The [init.6] proces is always assigned PID 1, making it a special PID.

\* The parent process ID (PPID) identifies the process that is the 'parent' of the process in question (it is the PID of the parent). The parent may call [wait.2] on a child to wait for it to terminate and get its exit status. If the parent process terminates before the child process terminates, the child\'s parent PID is set to 1 - the [init.6] process - hence causing it to be "adopted". [init.6] will call [wait.2] on the child as soon as it terminates, and ignore the exit status. The PPID may be found out by calling [getppid.2].

\* The effective user ID (EUID) and group ID (EGID) are user and group IDs used in determining whether the process has a permission to do something, such as access a file (based on its [access_mode.6]), and is also used to set the owner of files created by the process, and most other operations involving users and groups. They can be probed by calling [geteuid.2] and [getegid.2].

\* The saved-set-user ID (SUID) and saved-set-group ID (SGID) are saved user and group IDs which may become the effective or real user or group IDs by calling [setuid.2] and [setgid.2]; typically this is different from the effective and real group and user IDs if the process has loaded an executable by calling [exec.2] on a file with the SUID or SGID bits set.

\* The real user ID (RUID) and real group ID (RGID) are used to determine permissions for sending signals via [kill.2], and may also become effective by calls to [setuid.2] and [setgid.2]. They can be probed by calling [getuid.2] and [getgid.2]. See [signal.6].

\* The session ID (SID) determines which session the process is in. A session is associated with a particular 'controlling terminal', or lack thereof; closing the terminal of the session which a process belongs to causes the process to receive the *SIGHUP* signal. The SID can be obtained by calling [getsid.2] and a new SID may be allocated (hence creating a new session) by calling [setsid.2].

\* The process group ID (PGID) identifies which process group the process belongs to. A process group is formed when a set of pipelined commands (commands connected with pipe(s)) is executed in a shell. The command that prints directly to the terminal or output file is known as the process group leader. If a single command is ran, it is its own process group, and obviously its own leader. The PGID is equal to the PID of the process group leader. The controlling terminal of the session has one 'foreground process group', which is allowed to read/write the terminal; if a process from another group in the same session attempts to read/write the terminal, the *SIGTTIN* or *SIGTTOU* signals (respectively) are sent to that process and it is by default stopped until the foreground process group is changed to the process group containing the process wanting to read/write. The process may find out its process group by calling [getpgid.2] or create a new process group, and becoming its leader, by calling [setpgid.2] - those functions may also be used to test/set the process group ID of other processes.

\* The file creation mode mask ('umask') controls which permission bits are allowed o be set in the [access_mode.6] of files created by the process. It can be tested/set using [umask.2].

\* Supplementary group IDs are up to 16 different groups of users that the process is associated with. They may be probed by calling [getgroups.2], and set, under Glidix, using [_glidix_setgroups.2].

\* The signal dispositions control how the process responds to the reception of signals; see [signal.6].

\* The memory mappings control the layout of the process\' virtual address space, and can be added using [mmap.2] and removed using [munmap.2].

\* The file table maps file descriptors to file descriptions. See [open.2].

>>Thread Credentials

Each thread also has some per-thread credentials, which may be different for each thread in a process.

\* The value of [errno.6].

\* The current working directory is the starting point in searching relative pathnames. See [filesystem.6]. Note that under some operating systems, the current working directory is a process credential instead; a portable multi-threaded application should never update the current working directory after creating threads.

\* The pending [alarm.2].

\* Pending signals.

\* The thread ID which uniquely identifies the thread. It can be probed by calling [pthread_self.2].

\* The signal mask. It can be changed using [sigprocmask.2], but this function is deprecated since it is not guaranteed to be thread-safe on all operating systems - use [pthread_sigmask.2] instead. Under Glidix, those 2 functions are equivalent and both are thread-safe.

\* The own and delegatable permission sets. See [xperm.6].

\* The scheduling priority, which may be set or probed using [nice.2].
