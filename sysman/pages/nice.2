>NAME

nice - set scheduling priority

>SYNOPSIS

	#include <unistd.h>
	
	int nice(int 'incr');

>DESCRIPTION

This function adds 'incr' to the current nice value of the calling thread. A higher nice value means a lower scheduling priority. The allowed nice values range from -7 to 7 (inclusive); attempts to set a nice value outside the range are simply clamped to the range. The nice value of a new process is inherited from its parent during a [fork.2], but in most cases this will be the value 0 (normal priority).

The calling thread must have the *XP_NICE* executable permission in order to decrease its nice value (set a higher priority); all threads are allowed to increase the nice value and hence lower their priority.

>RETURN VALUE

On success, this function returns the new absolute nice value of the calling thread. Hence, 'nice(0)' simply returns the current nice value. On error, -1 is returned, but -1 may also be returned on success, indicating the new nice value is -1.

>ERRORS

Upon error, this function returns -1. However, this may also be returned on success. Hence, the caller must set [errno.6] to 0 before the call, and if the value of [errno.6] is nonzero after the call, then an error occured, and the value may be one of the following:

\* *EPERM* - The calling thread attempted to set a higher priotity for itself ('incr' is negative), but it does not have the *XP_NICE* executable permission.

>NOTES

Under Glidix, priorities follow a certain standard in normal system packages. Please document standard priorities below. They should also be '#define'd in '<glidix/sched.h>' in the kernel, with a specific macro name, in case we want to change them.

\* A nice value of '0' ('NICE_NORMAL') is the default priority, in which most processes run.

\* A nice value of '-2' ('NICE_NETRECV') is used by network receiver threads.

\* A nice value of '-4' ('NICE_UIN') is used by human input device drivers, such as keyboard drivers, to respond immediately to interrupts.

>SEE ALSO

[xperm.6], [errno.6]
