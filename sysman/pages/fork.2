>NAME

fork - create child process

>SYNOPSIS

	#include <sys/types.h>
	#include <unistd.h>
	
	pid_t fork();

>DESCRIPTION

This function creates a new process. The calling process becomes known as its 'parent', while the new process is called the 'child' of the calling process. The new process contains 1 initial thread, which starts executing the next instruction following the 'fork()' call. The memory contents and mappings of the new process are initially identical to that of the calling process, but changes made to memory by one process are only visible to itself. To distinguish one process from another, 'fork()' returns 0 to the child process, while returning a positive integer - the PID of the child process - to the parent process.

The two processes are similar, and different, in the following ways:

\* The memory image of the new process is a private copy of the memory image of the calling process; changes made by one process are not visible to the other.

\* The new process has a copy of all memory mappings, but calls to [mmap.2] and [munmap.2] may modify this copy, and the changes are not visible to the other process.

\* The new process has a copy of all open file descriptions (unless some description cannot be copied - this is a rare case). If a file can be seeked, the pointer is initially equal in both copies, but when [lseek.2] or similar is called by one process, only the pointer for that process is updated and the other process does not see the change.

\* The list of signal dispositions of the new process is initially identical to the dispositions of the calling process, but changes made by one process are not visible to the other. See [signal.6].

\* The new process initially has the same credentials (effective and real user and group IDs, etc) as the calling process, but has a different process ID (PID) and thread ID (see [getpid.2] and [pthread_self.2]). The parent PID of the new process, as returned by [getppid.2], is equal to the PID of the calling process. Changes made to the credentials of one process do not affect the other process.

\* The current working directory of the new process is initially equal to that of the calling thread, but changes to it made by one process do not affect the other process. See [chdir.2] and [getcwd.2].

\* The signal mask of the new process is initially equal to that of the calling process, but changes made to it by one process do not affect the other process. See [sigprocmask.2] and [pthread_sigmask.2].

\* The set of pending signals of the new process is initially clear.

\* The new process initially has no pending [alarm.2].

\* The value of [errno.6] in the new process is uninitialized, and so it is undefined until updated.

\* The executable permission sets of the new process are initially equal to that of the calling process, but changes made to them by one process do not affect the other. See [xperm.6].

\* The [nice.2] value of the new process is initially equal to that of the calling process, but changes made to it by one process do not affect the other.

When the child terminates, it becomes a 'zombie process'. The parent is usually expected to reap the child by calling [wait.2] on it, which returns its exit status.

>SAFETY

In a multithreaded application, the child process created by 'fork()' contains only 1 thread - the copy of the calling thread. This means that if other threads have acquired some lock, such as a semaphore, the child process will deadlock upon trying to acquire it. Hence, in such a situation, the child process is not allowed to call library functions such as [malloc.2], only system calls or trivial system call wrappers, suh as [exec.2].

>RETURN VALUE

On success, this function returns 0 to the child process, and a positive value - the PID of the newly-created child process - to the parent. On error, no child process is created, and -1 is returned, and [errno.6] is set to the appropriate value.

>ERRORS

When this function fails, it returns -1 and sets [errno.6] to one of the following:

\* *ENOMEM* - out of memory.

>EXAMPLE

The following example creates a new process, and executes "ls -l" in the new process and prints its exit status.

	pid_t pid = fork();
	if (pid == -1)
	{
		// an error occured
		perror("fork");
		exit(1);
	}
	else if (pid == 0)
	{
		// i am the child; execute "ls -l"
		execl("/usr/bin/ls", "ls", "-l", NULL);
		
		// if execl() returns, it always means an error occured.
		perror("exec");
		
		// the child must always return using _exit()!
		_exit(1);
	}
	else
	{
		// i am the parent; wait for the child to exit and obtain the exit status
		int status;
		waitpid(pid, &status, 0);
		
		printf("Child exited with status %d\\n", status);
	};

>SEE ALSO

[exec.2], [wait.2]
