>NAME

poll - poll for events on file descriptors

>SYNOPSIS

	#include <poll.h>
	
	int poll(struct pollfd *'fds', nfds_t 'nfds', int 'timeout');

>DESCRIPTION

This function can be used to wait for certain events on file descriptors, or simply check if they have already occured. The 'fds' argument is an array of 'struct pollfd' structures indicating file descriptors, and which events to wait for on those descriptors; 'nfds' is an integer specifying the number of elements in the 'fds' array. If 'timeout' is 0, the function does not block; if it is a positive nonzero integer, the function blocks for no longer than 'timeout' milliseconds; if 'timeout' is -1, the function may block indefinitely.

The 'struct pollfd' structure is defined in '<poll.h>' as follows:

	struct pollfd
	{
		int 'fd';
		short int 'events';
		short int 'revents';
	};

The 'fd' member indicates which file descriptor should be monitored. The 'events' field is a bitwise-OR of one or more poll flags (see below) describing the events to wait for. When the function returns, 'revents' is set to the bitwise-OR of the events that actually occured. The events *POLLERR*, *POLLHUP* and *POLLNVAL* may occur, and be set in 'revents', even if they are not included in 'events'.

The poll flags are as follows:

\* *POLLIN* - the file is ready for reading; that is, [read.2] on it will not block (but see NOTES).
\* *POLLOUT* - the file is ready for writing; that is, [write.2] on it will not block (but see NOTES).
\* *POLLHUP* - the other side of a connection represented by the file has terminated; this is reported even if not set in 'events'.
\* *POLLERR* - an error has occured on the file; this is reported even if not set in 'events'.
\* *POLLNVAL* - the 'fd' argument does not refer to an open file description; this is reported even if not set in 'events'.

>RETURN VALUE

On success, this function returns a positive integer indicating the number of entries in 'fds' in which 'revents' in nonzero; that is, the number of files that events have occured on. This may be zero if the operation timed out. On error, -1 is returned, and 'errno' is set to indicate the error.

>ERRORS

If this function returns -1, 'errno' may be set to one of the following values:

\* *EINTR* - an signal was caught before any events occured; see [signal.6].

>NOTES

In certain cases, this function may return "false positives". For example, a file may become available to read, but another thread may call [read.2] and consume all data before the caller of *poll*() manages to do so. Another situation is when a file is available for writing, but the [write.2] still blocks because the caller attempted to write more data than is possible. To be safe, you should make all files non-blocking, so that if *poll*() returns a false positive, the [read.2] or [write.2] operation will simply fail with *EAGAIN*.

Under Glidix, this function is implemented in the C library, using the lower-level system calls [_glidix_fpoll.2].

>SEE ALSO

[select.2], [errno.6]
