>NAME

xperm - Executable permissions

>SYNOPSIS

	#include <sys/xperm.h>

>DESCRIPTION

Executable permissions dictate which privileged operations an application is allowed to do. The permissions are a set represented by the type 'xperm_t' defined in '<sys/types.h>'. Executable permissions are per-thread, and each thread has 2 sets of such permissions:

\* 'Own permissions' - those are the permissions effective on the thread; i.e. the permissions that this thread is granted.
\* 'Delegatable permissions' - those are permissions that this thread may delegate to other threads; mechanisms explained below.

A set of permissions is a bitwise-OR of zero or more *XP_*\* constants, each indicating a specific permission. A bit being set means the corresponding permissions is granted. Only 63 permissions are possible; the highest bit being set indicates reserved values. The constant *XP_ALL* indicates a set with all permissions granted (that is, all bits except the highest bit set). The constant *XP_NCHG* is a symbolic value indicating to [_glidix_chxperm.2] that a specific set shall not be changed for a file.

Executable files also have 3 sets of executable permissions saved as metadata on a file system. An application may use [stat.2] to read those sets, and [_glidix_chxperm.2] to change them; a user may use the [stat.1] and [chxperm.1] commands for this purpose. The sets are as follows:

\* 'Inheritable permissions' - those permissions will be granted to the application upon execution (i.e. OR-ed into its own permission set) only if the application executing it already has this permission, and is also allowed to delegate it.

\* 'Own permissions' - this set of permissions will also be granted to the application upon execution; possibly along with some inherited permissions.

\* 'Delegatable permissions' - this set will be set as the delegateable set when the application is executed.

Currently, only the Glidix File System (GXFS) supports executable permissions on files.

>>Process Creation and Execution

When a thread is created using [pthread_create.2], its own and delegatable permission sets are initially equal to those of its parent thread. This is also true when a new process is created using [fork.2].

When [exec.2] is called, and is successful, the sets ('oxperm' being own, 'ixperm' being inheritable and 'dxperm' being delegatable) become as follows:

\* The 'own' permission set is set to '(parent_oxperm & (parent_dxperm & file_ixperm)) | file_oxperm'.
\* The 'delegatable' permission set is set to the delegatable set of the file.

>>Permissions

In the following list, *bold* indicates a macro (defined in '<sys/xperm.h>') that specifies the permission, and 'italics' indicates the name of the permission used by the [chxperm.1] command:

\* *XP_RAWSOCK* ('rawsock') - the application is allowed to open raw sockets as well as capture network traffic.
\* *XP_NETCONF* ('netconf') - the application is allowed to configure network interfaces.
\* *XP_MODULE* ('module') - the application is allowed to load and unload kernel modules. See [_glidix_insmod.2] and [_glidix_rmmod.2].
